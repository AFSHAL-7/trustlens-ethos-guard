
import React, { useState } from 'react';
import { Button } from '@/components/ui/button';
import { DropdownMenu, DropdownMenuContent, DropdownMenuItem, DropdownMenuTrigger } from '@/components/ui/dropdown-menu';
import { Download, FileText, Image, Table, CheckCircle, Loader2 } from 'lucide-react';
import { toast } from 'sonner';

interface ExportButtonProps {
  reportData: {
    documentTitle: string;
    riskScore: number;
    riskItems: Array<{
      clause: string;
      risk: string;
      impact: string;
      recommendation: string;
    }>;
    summaryData: Array<{
      title: string;
      content: string;
      riskLevel: 'low' | 'medium' | 'high';
    }>;
    originalText: string;
  };
}

type ExportStatus = 'idle' | 'exporting' | 'success' | 'error';

const ExportButton: React.FC<ExportButtonProps> = ({ reportData }) => {
  const [exportStatus, setExportStatus] = useState<ExportStatus>('idle');
  const [exportType, setExportType] = useState<string>('');

  const generatePDF = async () => {
    setExportStatus('exporting');
    setExportType('PDF');
    
    try {
      // Simulate PDF generation
      await new Promise(resolve => setTimeout(resolve, 2000));
      
      // Create enhanced report content
      const riskLevel = reportData.riskScore >= 70 ? 'HIGH' : reportData.riskScore >= 40 ? 'MEDIUM' : 'LOW';
      const content = `
╔═══════════════════════════════════════════════════════════════════════════╗
║                    OpenLens Risk Analysis Report                          ║
╚═══════════════════════════════════════════════════════════════════════════╝

Document Title: ${reportData.documentTitle}
Analysis Date:  ${new Date().toLocaleDateString('en-US', { year: 'numeric', month: 'long', day: 'numeric' })}
Analysis Time:  ${new Date().toLocaleTimeString('en-US')}

═══════════════════════════════════════════════════════════════════════════
EXECUTIVE SUMMARY
═══════════════════════════════════════════════════════════════════════════

Overall Risk Score: ${reportData.riskScore}/100 [${riskLevel} RISK]
Total Risk Items:   ${reportData.riskItems.length}
Critical Issues:    ${reportData.riskItems.filter((_, i) => i < 3).length}

═══════════════════════════════════════════════════════════════════════════
DETAILED RISK ANALYSIS
═══════════════════════════════════════════════════════════════════════════

${reportData.riskItems.map((item, index) => `
┌─────────────────────────────────────────────────────────────────────────┐
│ Risk Item #${index + 1}
└─────────────────────────────────────────────────────────────────────────┘

Clause:         ${item.clause}

Risk Details:   ${item.risk}

Impact:         ${item.impact}

Recommendation: ${item.recommendation}
`).join('\n')}

═══════════════════════════════════════════════════════════════════════════
SUMMARY SECTIONS
═══════════════════════════════════════════════════════════════════════════

${reportData.summaryData.map((section, index) => `
${index + 1}. ${section.title.toUpperCase()}
   Risk Level: ${section.riskLevel.toUpperCase()}
   
   ${section.content}
`).join('\n')}

═══════════════════════════════════════════════════════════════════════════
ORIGINAL DOCUMENT TEXT
═══════════════════════════════════════════════════════════════════════════

${reportData.originalText}

═══════════════════════════════════════════════════════════════════════════
Report generated by OpenLens - Your Privacy Risk Analysis Platform
═══════════════════════════════════════════════════════════════════════════
      `;
      
      const blob = new Blob([content], { type: 'text/plain' });
      const url = window.URL.createObjectURL(blob);
      const a = document.createElement('a');
      a.href = url;
      a.download = `${reportData.documentTitle.replace(/[^a-z0-9]/gi, '_')}_risk_report.txt`;
      a.click();
      window.URL.revokeObjectURL(url);
      
      setExportStatus('success');
      toast.success('PDF report downloaded successfully');
      
      setTimeout(() => setExportStatus('idle'), 3000);
    } catch (error) {
      setExportStatus('error');
      toast.error('Failed to generate PDF report');
      setTimeout(() => setExportStatus('idle'), 3000);
    }
  };

  const generateCSV = async () => {
    setExportStatus('exporting');
    setExportType('CSV');
    
    try {
      await new Promise(resolve => setTimeout(resolve, 1500));
      
      const riskLevel = reportData.riskScore >= 70 ? 'High' : reportData.riskScore >= 40 ? 'Medium' : 'Low';
      const csvContent = [
        ['OpenLens Risk Analysis Report'],
        ['Generated:', new Date().toLocaleDateString('en-US')],
        ['Document:', reportData.documentTitle],
        ['Overall Risk Score:', `${reportData.riskScore}/100`],
        ['Risk Level:', riskLevel],
        [],
        ['Item #', 'Clause', 'Risk Description', 'Impact Assessment', 'Recommendation'],
        ...reportData.riskItems.map((item, index) => [
          index + 1,
          item.clause,
          item.risk,
          item.impact,
          item.recommendation
        ])
      ].map(row => row.map(cell => `"${String(cell).replace(/"/g, '""')}"`).join(',')).join('\n');
      
      const blob = new Blob([csvContent], { type: 'text/csv' });
      const url = window.URL.createObjectURL(blob);
      const a = document.createElement('a');
      a.href = url;
      a.download = `${reportData.documentTitle.replace(/[^a-z0-9]/gi, '_')}_risk_data.csv`;
      a.click();
      window.URL.revokeObjectURL(url);
      
      setExportStatus('success');
      toast.success('CSV data downloaded successfully');
      
      setTimeout(() => setExportStatus('idle'), 3000);
    } catch (error) {
      setExportStatus('error');
      toast.error('Failed to generate CSV file');
      setTimeout(() => setExportStatus('idle'), 3000);
    }
  };

  const generateJSON = async () => {
    setExportStatus('exporting');
    setExportType('JSON');
    
    try {
      await new Promise(resolve => setTimeout(resolve, 1000));
      
      const riskLevel = reportData.riskScore >= 70 ? 'high' : reportData.riskScore >= 40 ? 'medium' : 'low';
      const jsonData = {
        report_metadata: {
          platform: 'OpenLens',
          version: '1.0',
          generated_at: new Date().toISOString(),
          analysis_date: new Date().toLocaleDateString('en-US')
        },
        document_analysis: {
          title: reportData.documentTitle,
          overall_risk_score: reportData.riskScore,
          risk_level: riskLevel,
          total_risk_items: reportData.riskItems.length
        },
        risk_items: reportData.riskItems.map((item, index) => ({
          item_number: index + 1,
          clause: item.clause,
          risk_description: item.risk,
          impact_assessment: item.impact,
          recommendation: item.recommendation
        })),
        summary_sections: reportData.summaryData.map(section => ({
          title: section.title,
          content: section.content,
          risk_level: section.riskLevel
        })),
        original_document: {
          full_text: reportData.originalText
        }
      };
      
      const blob = new Blob([JSON.stringify(jsonData, null, 2)], { type: 'application/json' });
      const url = window.URL.createObjectURL(blob);
      const a = document.createElement('a');
      a.href = url;
      a.download = `${reportData.documentTitle.replace(/[^a-z0-9]/gi, '_')}_risk_report.json`;
      a.click();
      window.URL.revokeObjectURL(url);
      
      setExportStatus('success');
      toast.success('JSON report downloaded successfully');
      
      setTimeout(() => setExportStatus('idle'), 3000);
    } catch (error) {
      setExportStatus('error');
      toast.error('Failed to generate JSON file');
      setTimeout(() => setExportStatus('idle'), 3000);
    }
  };

  const getStatusIcon = () => {
    switch (exportStatus) {
      case 'exporting':
        return <Loader2 className="h-4 w-4 animate-spin" />;
      case 'success':
        return <CheckCircle className="h-4 w-4 text-green-600" />;
      case 'error':
        return <Download className="h-4 w-4 text-red-600" />;
      default:
        return <Download className="h-4 w-4" />;
    }
  };

  const getStatusText = () => {
    switch (exportStatus) {
      case 'exporting':
        return `Generating ${exportType}...`;
      case 'success':
        return `${exportType} Downloaded`;
      case 'error':
        return 'Export Failed';
      default:
        return 'Export Report';
    }
  };

  return (
    <DropdownMenu>
      <DropdownMenuTrigger asChild>
        <Button 
          variant="outline" 
          size="sm" 
          className="hover:scale-105 transition-transform"
          disabled={exportStatus === 'exporting'}
        >
          {getStatusIcon()}
          <span className="ml-2">{getStatusText()}</span>
        </Button>
      </DropdownMenuTrigger>
      <DropdownMenuContent align="end" className="w-48">
        <DropdownMenuItem onClick={generatePDF} disabled={exportStatus === 'exporting'}>
          <FileText className="mr-2 h-4 w-4" />
          Export as PDF
        </DropdownMenuItem>
        <DropdownMenuItem onClick={generateCSV} disabled={exportStatus === 'exporting'}>
          <Table className="mr-2 h-4 w-4" />
          Export as CSV
        </DropdownMenuItem>
        <DropdownMenuItem onClick={generateJSON} disabled={exportStatus === 'exporting'}>
          <Image className="mr-2 h-4 w-4" />
          Export as JSON
        </DropdownMenuItem>
      </DropdownMenuContent>
    </DropdownMenu>
  );
};

export default ExportButton;
